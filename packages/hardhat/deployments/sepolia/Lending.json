{
  "address": "0x92a8F3d4e4a7D3a29c6F63899Ee788AB90e88D85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cornDEX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_corn",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lending__BorrowingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__InsufficientLiquidatorCorn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__UnsafePositionRatio",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AssetBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AssetRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForLiquidator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedUserDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "_calculatePositionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowCorn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayCorn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb20437b521a8d4783712ca79b1fd76dc56bb2b877d1c4637573c78cd006b70c",
  "receipt": {
    "to": null,
    "from": "0x20d877e8CCC4f0cD53a6b0437F4337e7f2632581",
    "contractAddress": "0x92a8F3d4e4a7D3a29c6F63899Ee788AB90e88D85",
    "transactionIndex": 100,
    "gasUsed": "956566",
    "logsBloom": "0x
    "blockHash": "0x303cee3c4e55efd5cffe782b57c48b43c301add59264a5b1105fd525a0ac4869",
    "transactionHash": "0xfb20437b521a8d4783712ca79b1fd76dc56bb2b877d1c4637573c78cd006b70c",
    "logs": [
      {
        "transactionIndex": 100,
        "blockNumber": 9091826,
        "transactionHash": "0xfb20437b521a8d4783712ca79b1fd76dc56bb2b877d1c4637573c78cd006b70c",
        "address": "0x92a8F3d4e4a7D3a29c6F63899Ee788AB90e88D85",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000020d877e8ccc4f0cd53a6b0437f4337e7f2632581"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x303cee3c4e55efd5cffe782b57c48b43c301add59264a5b1105fd525a0ac4869"
      },
      {
        "transactionIndex": 100,
        "blockNumber": 9091826,
        "transactionHash": "0xfb20437b521a8d4783712ca79b1fd76dc56bb2b877d1c4637573c78cd006b70c",
        "address": "0x2B43e198Ea90D25557633cBA541d75cDd74e609b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000092a8f3d4e4a7d3a29c6f63899ee788ab90e88d85",
          "0x00000000000000000000000092a8f3d4e4a7d3a29c6f63899ee788ab90e88d85"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 109,
        "blockHash": "0x303cee3c4e55efd5cffe782b57c48b43c301add59264a5b1105fd525a0ac4869"
      }
    ],
    "blockNumber": 9091826,
    "cumulativeGasUsed": "12772668",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8394AEFFe6927A437Dfcc51436FB93D3DAfeB625",
    "0x2B43e198Ea90D25557633cBA541d75cDd74e609b"
  ],
  "numDeployments": 1,
  "solcInputHash": "dadffa00275304f897388097f1def6fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cornDEX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_corn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lending__BorrowingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__InsufficientLiquidatorCorn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__UnsafePositionRatio\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForLiquidator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedUserDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"_calculatePositionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowCorn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayCorn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"AssetBorrowed(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of CORN tokens borrowed\",\"price\":\"The current ETH price at the time of borrowing\",\"user\":\"The address of the user borrowing\"}},\"AssetRepaid(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of CORN tokens repaid\",\"price\":\"The current ETH price at the time of repayment\",\"user\":\"The address of the user repaying\"}},\"CollateralAdded(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of ETH added as collateral\",\"price\":\"The current ETH price at the time of adding collateral\",\"user\":\"The address of the user adding collateral\"}},\"CollateralWithdrawn(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of ETH withdrawn\",\"price\":\"The current ETH price at the time of withdrawal\",\"user\":\"The address of the user withdrawing collateral\"}},\"Liquidation(address,address,uint256,uint256,uint256)\":{\"params\":{\"amountForLiquidator\":\"The amount of collateral given to the liquidator as reward\",\"liquidatedUserDebt\":\"The amount of debt that was liquidated\",\"liquidator\":\"The address of the liquidator\",\"price\":\"The current ETH price at the time of liquidation\",\"user\":\"The address of the user being liquidated\"}}},\"kind\":\"dev\",\"methods\":{\"_calculatePositionRatio(address)\":{\"custom:formula\":\"ratio = (collateralValue * 100) / borrowedAmount\",\"custom:note\":\"Returns type(uint256).max if user has no borrowed amount\",\"details\":\"Returns the percentage ratio of collateral value to borrowed amount\",\"params\":{\"user\":\"The address of the user to calculate the position ratio for\"},\"returns\":{\"_0\":\"The position ratio as a percentage (e.g., 150 means 150%)\"}},\"addCollateral()\":{\"custom:effects\":\"Increases user's collateral balance by msg.value\",\"custom:interactions\":\"Emits CollateralAdded event\",\"custom:requirements\":\"msg.value must be greater than 0\",\"details\":\"Users send ETH with this transaction which gets added to their collateral balance\"},\"borrowCorn(uint256)\":{\"custom:effects\":\"Increases user's borrowed balance by borrowAmount\",\"custom:interactions\":\"Transfers CORN tokens to user, emits AssetBorrowed event\",\"custom:requirements\":\"borrowAmount must be > 0resulting position must remain above collateral ratio\",\"details\":\"Validates that the resulting position remains safe after borrowing\",\"params\":{\"borrowAmount\":\"The amount of CORN tokens to borrow\"}},\"calculateCollateralValue(address)\":{\"custom:formula\":\"collateralValue = (userCollateral * currentPrice) / 1e18\",\"details\":\"Multiplies user's ETH collateral by current ETH price and adjusts for decimals\",\"params\":{\"user\":\"The address of the user to calculate the collateral value for\"},\"returns\":{\"_0\":\"The collateral value in CORN token units\"}},\"constructor\":{\"details\":\"Sets up the CornDEX and Corn contract references and approves maximum spending\",\"params\":{\"_corn\":\"The address of the CORN token contract\",\"_cornDEX\":\"The address of the CornDEX contract for price feeds\"}},\"isLiquidatable(address)\":{\"details\":\"A position is liquidatable if the collateral ratio falls below the minimum requirement\",\"params\":{\"user\":\"The address of the user to check\"},\"returns\":{\"_0\":\"True if the position is liquidatable (ratio < COLLATERAL_RATIO), false otherwise\"}},\"liquidate(address)\":{\"custom:effects\":\"- User's debt is set to 0 - User's collateral is reduced by the amount transferred to liquidator - Liquidator receives collateral proportional to debt plus liquidation reward\",\"custom:events\":\"Emits Liquidation event with liquidation details and current corn price\",\"custom:interactions\":\"- Transfers CORN from liquidator to this contract - Transfers ETH collateral to liquidator\",\"custom:requirements\":\"- The user's position must be liquidatable (checked via isLiquidatable function) - Liquidator must have sufficient CORN balance to cover the user's debt - Liquidator must have approved this contract to transfer the debt amount in CORN\",\"details\":\"Liquidates a user's position by paying their debt and receiving collateral plus rewardThe liquidation reward is calculated as a percentage of the collateral being liquidatedIf calculated reward exceeds available collateral, the liquidator receives all remaining collateral\",\"params\":{\"user\":\"The address of the user to liquidate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repayCorn(uint256)\":{\"custom:requirements\":\"- repayAmount must be greater than 0 - repayAmount must not exceed user's current debt - User must have approved this contract to transfer repayAmount of CORN tokens - User must have sufficient CORN balance\",\"details\":\"Validates the repay amount and updates user's debt balanceEmits AssetRepaid event with current corn price\",\"params\":{\"repayAmount\":\"The amount of corn to repay\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawCollateral(uint256)\":{\"custom:effects\":\"Decreases user's collateral balance by amount\",\"custom:interactions\":\"Transfers ETH to user, emits CollateralWithdrawn event\",\"custom:requirements\":\"amount must be > 0 and <= user's collateral balanceresulting position must remain above collateral ratio\",\"details\":\"Validates position safety before allowing withdrawal\",\"params\":{\"amount\":\"The amount of ETH collateral to withdraw\"}}},\"stateVariables\":{\"COLLATERAL_RATIO\":{\"details\":\"Positions below this ratio can be liquidated\"},\"LIQUIDATOR_REWARD\":{\"details\":\"Liquidators receive 10% of the liquidated collateral as reward\"},\"i_corn\":{\"details\":\"Used for borrowing and repaying CORN tokens\"},\"i_cornDEX\":{\"details\":\"Used to get current ETH/CORN price for collateral calculations\"},\"s_userBorrowed\":{\"details\":\"Tracks how much CORN each user has borrowed\"},\"s_userCollateral\":{\"details\":\"Tracks how much ETH each user has deposited as collateral\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Lending__BorrowingFailed()\":[{\"notice\":\"Thrown when a borrow operation fails\"}],\"Lending__InsufficientLiquidatorCorn()\":[{\"notice\":\"Thrown when liquidator doesn't have sufficient CORN tokens\"}],\"Lending__InvalidAmount()\":[{\"notice\":\"Thrown when an invalid amount (0 or insufficient) is provided\"}],\"Lending__NotLiquidatable()\":[{\"notice\":\"Thrown when a position is not eligible for liquidation\"}],\"Lending__TransferFailed()\":[{\"notice\":\"Thrown when a transfer operation fails\"}],\"Lending__UnsafePositionRatio()\":[{\"notice\":\"Thrown when a user's position ratio becomes unsafe (below collateral requirement)\"}]},\"events\":{\"AssetBorrowed(address,uint256,uint256)\":{\"notice\":\"Emitted when a user borrows CORN tokens\"},\"AssetRepaid(address,uint256,uint256)\":{\"notice\":\"Emitted when a user repays CORN tokens\"},\"CollateralAdded(address,uint256,uint256)\":{\"notice\":\"Emitted when a user adds collateral to their account\"},\"CollateralWithdrawn(address,uint256,uint256)\":{\"notice\":\"Emitted when a user withdraws collateral from their account\"},\"Liquidation(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a liquidation occurs\"}},\"kind\":\"user\",\"methods\":{\"_calculatePositionRatio(address)\":{\"notice\":\"Calculates the position ratio for a user to ensure they are within safe limits\"},\"addCollateral()\":{\"notice\":\"Allows users to add ETH collateral to their account\"},\"borrowCorn(uint256)\":{\"notice\":\"Allows users to borrow CORN tokens based on their collateral\"},\"calculateCollateralValue(address)\":{\"notice\":\"Calculates the total collateral value for a user in CORN tokens\"},\"constructor\":{\"notice\":\"Constructor to initialize the Lending contract\"},\"isLiquidatable(address)\":{\"notice\":\"Checks if a user's position can be liquidated\"},\"liquidate(address)\":{\"notice\":\"Allows liquidators to liquidate unsafe positions\"},\"repayCorn(uint256)\":{\"notice\":\"Allows users to repay corn and reduce their debt\"},\"s_userBorrowed(address)\":{\"notice\":\"Mapping of user addresses to their borrowed CORN amount\"},\"s_userCollateral(address)\":{\"notice\":\"Mapping of user addresses to their collateral balance in ETH\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Allows users to withdraw collateral as long as it doesn't make them liquidatable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending.sol\":\"Lending\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Corn.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Corn__InvalidAmount();\\nerror Corn__InsufficientBalance();\\nerror Corn__InsufficientAllowance();\\nerror Corn__InvalidAddress();\\n\\ncontract Corn is ERC20, Ownable {\\n    constructor() ERC20(\\\"CORN\\\", \\\"CORN\\\") Ownable(msg.sender) {}\\n\\n    function mintTo(address to, uint256 amount) external onlyOwner returns (bool) {\\n        if (to == address(0)) {\\n            revert Corn__InvalidAddress();\\n        }\\n        if (amount == 0) {\\n            revert Corn__InvalidAmount();\\n        }\\n        _mint(to, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1fe76b42b3dad63e827222a89ffecabad669010647857823c863872148be3126\",\"license\":\"UNLICENSED\"},\"contracts/CornDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\\n */\\ncontract CornDEX {\\n    /* ========== GLOBAL VARIABLES ========== */\\n\\n    IERC20 token; //instantiates the imported contract\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\\n    event PriceUpdated(uint256 price);\\n    /**\\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n     */\\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\\n\\n    /**\\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n     */\\n    event LiquidityRemoved(\\n        address liquidityRemover,\\n        uint256 liquidityWithdrawn,\\n        uint256 tokensOutput,\\n        uint256 ethOutput\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address tokenAddr) {\\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\\n     * @param tokens amount to be transferred to DEX\\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\\n     */\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"DEX: init - already has liquidity\\\");\\n        totalLiquidity = address(this).balance;\\n        liquidity[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"DEX: init - transfer did not transact\\\");\\n        return totalLiquidity;\\n    }\\n\\n    /**\\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\\n     */\\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\\n        uint256 numerator = xInput * yReserves;\\n        uint256 denominator = (xReserves) + xInput;\\n        return (numerator / denominator);\\n    }\\n\\n    /**\\n     * @notice returns the current price of ETH in CORN\\n     */\\n    function currentPrice() public view returns (uint256 _currentPrice) {\\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\\n     */\\n    function calculateXInput(\\n        uint256 yOutput,\\n        uint256 xReserves,\\n        uint256 yReserves\\n    ) public pure returns (uint256 xInput) {\\n        uint256 numerator = yOutput * xReserves;\\n        uint256 denominator = yReserves - yOutput;\\n\\n        return (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice sends Ether to DEX in exchange for $CORN\\n     */\\n    function ethToToken() internal returns (uint256 tokenOutput) {\\n        require(msg.value > 0, \\\"cannot swap 0 ETH\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\\n\\n        require(token.transfer(msg.sender, tokenOutput), \\\"ethToToken(): reverted swap.\\\");\\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\\n        return tokenOutput;\\n    }\\n\\n    /**\\n     * @notice sends $CORN tokens to DEX in exchange for Ether\\n     */\\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\\n        require(tokenInput > 0, \\\"cannot swap 0 tokens\\\");\\n        require(token.balanceOf(msg.sender) >= tokenInput, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \\\"insufficient allowance\\\");\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \\\"tokenToEth(): reverted swap.\\\");\\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\\\"\\\");\\n        require(sent, \\\"tokenToEth: revert in transferring eth to you!\\\");\\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\\n        return ethOutput;\\n    }\\n\\n    /**\\n     * @notice allows users to swap ETH for $CORN or $CORN for ETH with a single method\\n     */\\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\\n        if (msg.value > 0 && inputAmount == msg.value) {\\n            outputAmount = ethToToken();\\n        } else {\\n            outputAmount = tokenToEth(inputAmount);\\n        }\\n        emit PriceUpdated(currentPrice());\\n    }\\n\\n    /**\\n     * @notice allows deposits of $CORN and $ETH to liquidity pool\\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor.\\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\\n     */\\n    function deposit() public payable returns (uint256 tokensDeposited) {\\n        require(msg.value > 0, \\\"Must send value when depositing\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 tokenDeposit;\\n\\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\\n\\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \\\"insufficient allowance\\\");\\n\\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n\\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\\n        return tokenDeposit;\\n    }\\n\\n    /**\\n     * @notice allows withdrawal of $CORN and $ETH from liquidity pool\\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\\n     */\\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\\n        require(liquidity[msg.sender] >= amount, \\\"withdraw: sender does not have enough liquidity to withdraw.\\\");\\n        uint256 ethReserve = address(this).balance;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethWithdrawn;\\n\\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\\n\\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\\n        liquidity[msg.sender] -= amount;\\n        totalLiquidity -= amount;\\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\\\"\\\");\\n        require(sent, \\\"withdraw(): revert in transferring eth to you!\\\");\\n        require(token.transfer(msg.sender, tokenAmount));\\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\\n        return (ethWithdrawn, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x5a3ac036d8480dc68a834ce1e97ba6369bb6bf810afa3070c2b0e2347ab6f2c2\",\"license\":\"MIT\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Corn.sol\\\";\\nimport \\\"./CornDEX.sol\\\";\\n\\n/// @title Lending Protocol for Corn Token\\n/// @author [Your Name]\\n/// @notice A decentralized lending protocol that allows users to deposit ETH as collateral and borrow CORN tokens\\n/// @dev This contract implements a over-collateralized lending system with liquidation mechanism\\n/// @custom:security-contact [security@yourprotocol.com]\\n\\n/// @notice Thrown when an invalid amount (0 or insufficient) is provided\\nerror Lending__InvalidAmount();\\n\\n/// @notice Thrown when a transfer operation fails\\nerror Lending__TransferFailed();\\n\\n/// @notice Thrown when a user's position ratio becomes unsafe (below collateral requirement)\\nerror Lending__UnsafePositionRatio();\\n\\n/// @notice Thrown when a borrow operation fails\\nerror Lending__BorrowingFailed();\\n\\n/// @notice Thrown when a repay operation fails\\nerror Lending__RepayingFailed();\\n\\n/// @notice Thrown when trying to liquidate a safe position\\nerror Lending__PositionSafe();\\n\\n/// @notice Thrown when a position is not eligible for liquidation\\nerror Lending__NotLiquidatable();\\n\\n/// @notice Thrown when liquidator doesn't have sufficient CORN tokens\\nerror Lending__InsufficientLiquidatorCorn();\\n\\ncontract Lending is Ownable {\\n    /// @notice Minimum collateralization ratio required (120%)\\n    /// @dev Positions below this ratio can be liquidated\\n    uint256 private constant COLLATERAL_RATIO = 120;\\n    \\n    /// @notice Reward percentage for liquidators (10%)\\n    /// @dev Liquidators receive 10% of the liquidated collateral as reward\\n    uint256 private constant LIQUIDATOR_REWARD = 10;\\n\\n    /// @notice The CORN token contract instance\\n    /// @dev Used for borrowing and repaying CORN tokens\\n    Corn private i_corn;\\n    \\n    /// @notice The CornDEX contract instance for price feeds\\n    /// @dev Used to get current ETH/CORN price for collateral calculations\\n    CornDEX private i_cornDEX;\\n\\n    /// @notice Mapping of user addresses to their collateral balance in ETH\\n    /// @dev Tracks how much ETH each user has deposited as collateral\\n    mapping(address => uint256) public s_userCollateral;\\n    \\n    /// @notice Mapping of user addresses to their borrowed CORN amount\\n    /// @dev Tracks how much CORN each user has borrowed\\n    mapping(address => uint256) public s_userBorrowed;\\n\\n    /// @notice Emitted when a user adds collateral to their account\\n    /// @param user The address of the user adding collateral\\n    /// @param amount The amount of ETH added as collateral\\n    /// @param price The current ETH price at the time of adding collateral\\n    event CollateralAdded(address indexed user, uint256 indexed amount, uint256 price);\\n    \\n    /// @notice Emitted when a user withdraws collateral from their account\\n    /// @param user The address of the user withdrawing collateral\\n    /// @param amount The amount of ETH withdrawn\\n    /// @param price The current ETH price at the time of withdrawal\\n    event CollateralWithdrawn(address indexed user, uint256 indexed amount, uint256 price);\\n    \\n    /// @notice Emitted when a user borrows CORN tokens\\n    /// @param user The address of the user borrowing\\n    /// @param amount The amount of CORN tokens borrowed\\n    /// @param price The current ETH price at the time of borrowing\\n    event AssetBorrowed(address indexed user, uint256 indexed amount, uint256 price);\\n    \\n    /// @notice Emitted when a user repays CORN tokens\\n    /// @param user The address of the user repaying\\n    /// @param amount The amount of CORN tokens repaid\\n    /// @param price The current ETH price at the time of repayment\\n    event AssetRepaid(address indexed user, uint256 indexed amount, uint256 price);\\n    \\n    /// @notice Emitted when a liquidation occurs\\n    /// @param user The address of the user being liquidated\\n    /// @param liquidator The address of the liquidator\\n    /// @param amountForLiquidator The amount of collateral given to the liquidator as reward\\n    /// @param liquidatedUserDebt The amount of debt that was liquidated\\n    /// @param price The current ETH price at the time of liquidation\\n    event Liquidation(\\n        address indexed user,\\n        address indexed liquidator,\\n        uint256 amountForLiquidator,\\n        uint256 liquidatedUserDebt,\\n        uint256 price\\n    );\\n\\n    /// @notice Constructor to initialize the Lending contract\\n    /// @dev Sets up the CornDEX and Corn contract references and approves maximum spending\\n    /// @param _cornDEX The address of the CornDEX contract for price feeds\\n    /// @param _corn The address of the CORN token contract\\n    constructor(address _cornDEX, address _corn) Ownable(msg.sender) {\\n        i_cornDEX = CornDEX(_cornDEX);\\n        i_corn = Corn(_corn);\\n        i_corn.approve(address(this), type(uint256).max);\\n    }\\n\\n    /// @notice Allows users to add ETH collateral to their account\\n    /// @dev Users send ETH with this transaction which gets added to their collateral balance\\n    /// @custom:requirements msg.value must be greater than 0\\n    /// @custom:effects Increases user's collateral balance by msg.value\\n    /// @custom:interactions Emits CollateralAdded event\\n    function addCollateral() public payable {\\n        if (msg.value == 0) {revert Lending__InvalidAmount();}\\n        s_userCollateral[msg.sender] += msg.value;\\n\\n        emit CollateralAdded(msg.sender, msg.value, i_cornDEX.currentPrice());\\n    }\\n\\n    /// @notice Allows users to withdraw collateral as long as it doesn't make them liquidatable\\n    /// @dev Validates position safety before allowing withdrawal\\n    /// @param amount The amount of ETH collateral to withdraw\\n    /// @custom:requirements amount must be > 0 and <= user's collateral balance\\n    /// @custom:requirements resulting position must remain above collateral ratio\\n    /// @custom:effects Decreases user's collateral balance by amount\\n    /// @custom:interactions Transfers ETH to user, emits CollateralWithdrawn event\\n    function withdrawCollateral(uint256 amount) public {\\n        if (amount == 0 || s_userCollateral[msg.sender] < amount) {revert Lending__InvalidAmount();}\\n        s_userCollateral[msg.sender] -= amount;\\n        _validatePosition(msg.sender);\\n\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Lending__TransferFailed();\\n        }\\n\\n        emit CollateralWithdrawn(msg.sender, amount, i_cornDEX.currentPrice()); \\n    }\\n\\n    /// @notice Calculates the total collateral value for a user in CORN tokens\\n    /// @dev Multiplies user's ETH collateral by current ETH price and adjusts for decimals\\n    /// @param user The address of the user to calculate the collateral value for\\n    /// @return The collateral value in CORN token units\\n    /// @custom:formula collateralValue = (userCollateral * currentPrice) / 1e18\\n    function calculateCollateralValue(address user) public view returns (uint256) {\\n        return s_userCollateral[user] * i_cornDEX.currentPrice() / 1e18;\\n    }\\n\\n    /// @notice Calculates the position ratio for a user to ensure they are within safe limits\\n    /// @dev Returns the percentage ratio of collateral value to borrowed amount\\n    /// @param user The address of the user to calculate the position ratio for\\n    /// @return The position ratio as a percentage (e.g., 150 means 150%)\\n    /// @custom:formula ratio = (collateralValue * 100) / borrowedAmount\\n    /// @custom:note Returns type(uint256).max if user has no borrowed amount\\n    function _calculatePositionRatio(address user) public view returns (uint256) { \\n       uint256 borrowedAmount = s_userBorrowed[user];\\n       if (borrowedAmount == 0) {return type(uint256).max;} \\n       return (calculateCollateralValue(user) * 100) / borrowedAmount; \\n    }\\n\\n    /// @notice Checks if a user's position can be liquidated\\n    /// @dev A position is liquidatable if the collateral ratio falls below the minimum requirement\\n    /// @param user The address of the user to check\\n    /// @return True if the position is liquidatable (ratio < COLLATERAL_RATIO), false otherwise\\n    function isLiquidatable(address user) public view returns (bool) {\\n        return _calculatePositionRatio(user) < COLLATERAL_RATIO;\\n    }\\n\\n    /// @notice Internal view method that reverts if a user's position is unsafe\\n    /// @dev Used to validate positions before allowing operations that could make them unsafe\\n    /// @param user The address of the user to validate\\n    /// @custom:reverts Lending__UnsafePositionRatio if position is liquidatable\\n    function _validatePosition(address user) internal view {\\n        if (isLiquidatable(user)) {revert Lending__UnsafePositionRatio();}\\n    }\\n\\n    /// @notice Allows users to borrow CORN tokens based on their collateral\\n    /// @dev Validates that the resulting position remains safe after borrowing\\n    /// @param borrowAmount The amount of CORN tokens to borrow\\n    /// @custom:requirements borrowAmount must be > 0\\n    /// @custom:requirements resulting position must remain above collateral ratio\\n    /// @custom:effects Increases user's borrowed balance by borrowAmount\\n    /// @custom:interactions Transfers CORN tokens to user, emits AssetBorrowed event\\n    function borrowCorn(uint256 borrowAmount) public {\\n        if (borrowAmount == 0) {revert Lending__InvalidAmount();}\\n\\n        s_userBorrowed[msg.sender] += borrowAmount;\\n        _validatePosition(msg.sender);\\n        bool success = i_corn.transfer(msg.sender, borrowAmount);\\n        if (!success) {\\n            revert Lending__BorrowingFailed(); \\n        }\\n\\n        emit AssetBorrowed(msg.sender, borrowAmount, i_cornDEX.currentPrice());\\n    }\\n    /**\\n    * @notice Allows users to repay corn and reduce their debt\\n    * @dev Validates the repay amount and updates user's debt balance\\n    * @dev Emits AssetRepaid event with current corn price\\n    * @param repayAmount The amount of corn to repay\\n    * @custom:requirements\\n    * - repayAmount must be greater than 0\\n    * - repayAmount must not exceed user's current debt\\n    * - User must have approved this contract to transfer repayAmount of CORN tokens\\n    * - User must have sufficient CORN balance\\n    */\\n    function repayCorn(uint256 repayAmount) public {\\n        if (repayAmount == 0 || repayAmount > s_userBorrowed[msg.sender]) {\\n            revert Lending__InvalidAmount();\\n        }\\n        s_userBorrowed[msg.sender] -= repayAmount;\\n        i_corn.transferFrom(msg.sender, address(this), repayAmount);\\n        emit AssetRepaid(msg.sender, repayAmount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n    * @notice Allows liquidators to liquidate unsafe positions\\n    * @dev Liquidates a user's position by paying their debt and receiving collateral plus reward\\n    * @dev The liquidation reward is calculated as a percentage of the collateral being liquidated\\n    * @dev If calculated reward exceeds available collateral, the liquidator receives all remaining collateral\\n    * @param user The address of the user to liquidate\\n    * @custom:requirements\\n    * - The user's position must be liquidatable (checked via isLiquidatable function)\\n    * - Liquidator must have sufficient CORN balance to cover the user's debt\\n    * - Liquidator must have approved this contract to transfer the debt amount in CORN\\n    * @custom:effects\\n    * - User's debt is set to 0\\n    * - User's collateral is reduced by the amount transferred to liquidator\\n    * - Liquidator receives collateral proportional to debt plus liquidation reward\\n    * @custom:interactions\\n    * - Transfers CORN from liquidator to this contract\\n    * - Transfers ETH collateral to liquidator\\n    * @custom:events Emits Liquidation event with liquidation details and current corn price\\n    */\\n    function liquidate(address user) public {\\n        if (!isLiquidatable(user)) {\\n            revert Lending__NotLiquidatable();\\n        }\\n        \\n        uint256 userDebt = s_userBorrowed[user];\\n        if (i_corn.balanceOf(msg.sender) < userDebt) {\\n            revert Lending__InsufficientLiquidatorCorn();\\n        }\\n        \\n        uint256 userCollateral = s_userCollateral[user];\\n        uint256 collateralValue = calculateCollateralValue(user);\\n        \\n        // Transfer debt payment from liquidator\\n        i_corn.transferFrom(msg.sender, address(this), userDebt);\\n        s_userBorrowed[user] = 0;\\n        \\n        // Calculate collateral to liquidate and reward\\n        uint256 collateral = (userDebt * userCollateral) / collateralValue;\\n        uint256 liquidatorReward = (collateral * LIQUIDATOR_REWARD) / 100;\\n        uint256 amountForLiquidator = collateral + liquidatorReward;\\n        \\n        // Ensure we don't exceed available collateral\\n        amountForLiquidator = amountForLiquidator > userCollateral ? userCollateral : amountForLiquidator;\\n        \\n        // Update user's collateral balance\\n        s_userCollateral[user] = userCollateral - amountForLiquidator;\\n        \\n        // Transfer collateral to liquidator\\n        (bool success,) = payable(msg.sender).call{ value: amountForLiquidator }(\\\"\\\");\\n        if (!success) {\\n            revert Lending__TransferFailed();\\n        }\\n        \\n        emit Liquidation(user, msg.sender, amountForLiquidator, userDebt, i_cornDEX.currentPrice());\\n    }\\n}\",\"keccak256\":\"0xc3b6d9e72af58658411d6a30fc9928770e97c931b12eed5d70b6370e2641af21\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063d5de45a611610059578063d5de45a61461020b578063d678598a1461022b578063f2fde38b1461024b578063f373d3c41461026b57600080fd5b80638da5cb5b146101ae5780639e816999146101d6578063bd00c24d146101de57600080fd5b8063042e02cf146100c75780630835e145146100fc5780632a5f2c231461012a5780632f865568146101575780636112fe2e14610179578063715018a614610199575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610d4f565b61028b565b60405190151581526020015b60405180910390f35b34801561010857600080fd5b5061011c610117366004610d4f565b61029f565b6040519081526020016100f3565b34801561013657600080fd5b5061011c610145366004610d4f565b60046020526000908152604090205481565b34801561016357600080fd5b50610177610172366004610d4f565b610354565b005b34801561018557600080fd5b50610177610194366004610d78565b61068b565b3480156101a557600080fd5b50610177610813565b3480156101ba57600080fd5b506000546040516001600160a01b0390911681526020016100f3565b610177610827565b3480156101ea57600080fd5b5061011c6101f9366004610d4f565b60036020526000908152604090205481565b34801561021757600080fd5b50610177610226366004610d78565b610924565b34801561023757600080fd5b50610177610246366004610d78565b610a88565b34801561025757600080fd5b50610177610266366004610d4f565b610c18565b34801561027757600080fd5b5061011c610286366004610d4f565b610c5b565b6000607861029883610c5b565b1092915050565b6000670de0b6b3a7640000600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103219190610d91565b6001600160a01b0384166000908152600360205260409020546103449190610dc0565b61034e9190610dd7565b92915050565b61035d8161028b565b61037a5760405163175ae04960e11b815260040160405180910390fd5b6001600160a01b038181166000908152600460208190526040918290205460015492516370a0823160e01b8152339281019290925292839216906370a0823190602401602060405180830381865afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610d91565b101561041d576040516327f93fb360e11b815260040160405180910390fd5b6001600160a01b038216600090815260036020526040812054906104408461029f565b6001546040516323b872dd60e01b8152336004820152306024820152604481018690529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc9190610df9565b506001600160a01b0384166000908152600460205260408120819055816104e38486610dc0565b6104ed9190610dd7565b9050600060646104fe600a84610dc0565b6105089190610dd7565b905060006105168284610e1b565b90508481116105255780610527565b845b90506105338186610e2e565b6001600160a01b038816600090815260036020526040808220929092559051339083908381818185875af1925050503d806000811461058e576040519150601f19603f3d011682016040523d82523d6000602084013e610593565b606091505b50509050806105b55760405163a419137f60e01b815260040160405180910390fd5b336001600160a01b0316886001600160a01b03167f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a07192664307848a600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190610d91565b6040805193845260208401929092529082015260600160405180910390a35050505050505050565b8015806106a657503360009081526003602052604090205481115b156106c45760405163269cf19b60e11b815260040160405180910390fd5b33600090815260036020526040812080548392906106e3908490610e2e565b909155506106f2905033610cab565b604051600090339083908381818185875af1925050503d8060008114610734576040519150601f19603f3d011682016040523d82523d6000602084013e610739565b606091505b505090508061075b5760405163a419137f60e01b815260040160405180910390fd5b81336001600160a01b03167fdaed309a628faec6cab72194019e2a1a34e890ca9bf9be99788992dd54692819600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190610d91565b60405190815260200160405180910390a35050565b61081b610cd2565b6108256000610cff565b565b346000036108485760405163269cf19b60e11b815260040160405180910390fd5b3360009081526003602052604081208054349290610867908490610e1b565b9250508190555034336001600160a01b03167f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109119190610d91565b60405190815260200160405180910390a3565b806000036109455760405163269cf19b60e11b815260040160405180910390fd5b3360009081526004602052604081208054839290610964908490610e1b565b90915550610973905033610cab565b60015460405163a9059cbb60e01b8152336004820152602481018390526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190610df9565b905080610a09576040516325b1478b60e21b815260040160405180910390fd5b81336001600160a01b03167f6c8250ea4d625c09ee567802242f70b37c9dcfdb10a904563781c1ed7663c7cc600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107da573d6000803e3d6000fd5b801580610aa357503360009081526004602052604090205481115b15610ac15760405163269cf19b60e11b815260040160405180910390fd5b3360009081526004602052604081208054839290610ae0908490610e2e565b90915550506001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190610df9565b5080336001600160a01b03167fc1afad9537411d7ba4a74e9ee309d18f26f72ee1bfc63647b61e9bca0eec322c600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190610d91565b60405190815260200160405180910390a350565b610c20610cd2565b6001600160a01b038116610c4f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610c5881610cff565b50565b6001600160a01b038116600090815260046020526040812054808203610c85575060001992915050565b80610c8f8461029f565b610c9a906064610dc0565b610ca49190610dd7565b9392505050565b610cb48161028b565b15610c5857604051632606396760e21b815260040160405180910390fd5b6000546001600160a01b031633146108255760405163118cdaa760e01b8152336004820152602401610c46565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610d6157600080fd5b81356001600160a01b0381168114610ca457600080fd5b600060208284031215610d8a57600080fd5b5035919050565b600060208284031215610da357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761034e5761034e610daa565b600082610df457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610e0b57600080fd5b81518015158114610ca457600080fd5b8082018082111561034e5761034e610daa565b8181038181111561034e5761034e610daa56fea26469706673582212208773a0958357e9be06582926ce2f304ebceac02b75bbcbd7604f80c62324142864736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "AssetBorrowed(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of CORN tokens borrowed",
          "price": "The current ETH price at the time of borrowing",
          "user": "The address of the user borrowing"
        }
      },
      "AssetRepaid(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of CORN tokens repaid",
          "price": "The current ETH price at the time of repayment",
          "user": "The address of the user repaying"
        }
      },
      "CollateralAdded(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of ETH added as collateral",
          "price": "The current ETH price at the time of adding collateral",
          "user": "The address of the user adding collateral"
        }
      },
      "CollateralWithdrawn(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of ETH withdrawn",
          "price": "The current ETH price at the time of withdrawal",
          "user": "The address of the user withdrawing collateral"
        }
      },
      "Liquidation(address,address,uint256,uint256,uint256)": {
        "params": {
          "amountForLiquidator": "The amount of collateral given to the liquidator as reward",
          "liquidatedUserDebt": "The amount of debt that was liquidated",
          "liquidator": "The address of the liquidator",
          "price": "The current ETH price at the time of liquidation",
          "user": "The address of the user being liquidated"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "_calculatePositionRatio(address)": {
        "custom:formula": "ratio = (collateralValue * 100) / borrowedAmount",
        "custom:note": "Returns type(uint256).max if user has no borrowed amount",
        "details": "Returns the percentage ratio of collateral value to borrowed amount",
        "params": {
          "user": "The address of the user to calculate the position ratio for"
        },
        "returns": {
          "_0": "The position ratio as a percentage (e.g., 150 means 150%)"
        }
      },
      "addCollateral()": {
        "custom:effects": "Increases user's collateral balance by msg.value",
        "custom:interactions": "Emits CollateralAdded event",
        "custom:requirements": "msg.value must be greater than 0",
        "details": "Users send ETH with this transaction which gets added to their collateral balance"
      },
      "borrowCorn(uint256)": {
        "custom:effects": "Increases user's borrowed balance by borrowAmount",
        "custom:interactions": "Transfers CORN tokens to user, emits AssetBorrowed event",
        "custom:requirements": "borrowAmount must be > 0resulting position must remain above collateral ratio",
        "details": "Validates that the resulting position remains safe after borrowing",
        "params": {
          "borrowAmount": "The amount of CORN tokens to borrow"
        }
      },
      "calculateCollateralValue(address)": {
        "custom:formula": "collateralValue = (userCollateral * currentPrice) / 1e18",
        "details": "Multiplies user's ETH collateral by current ETH price and adjusts for decimals",
        "params": {
          "user": "The address of the user to calculate the collateral value for"
        },
        "returns": {
          "_0": "The collateral value in CORN token units"
        }
      },
      "constructor": {
        "details": "Sets up the CornDEX and Corn contract references and approves maximum spending",
        "params": {
          "_corn": "The address of the CORN token contract",
          "_cornDEX": "The address of the CornDEX contract for price feeds"
        }
      },
      "isLiquidatable(address)": {
        "details": "A position is liquidatable if the collateral ratio falls below the minimum requirement",
        "params": {
          "user": "The address of the user to check"
        },
        "returns": {
          "_0": "True if the position is liquidatable (ratio < COLLATERAL_RATIO), false otherwise"
        }
      },
      "liquidate(address)": {
        "custom:effects": "- User's debt is set to 0 - User's collateral is reduced by the amount transferred to liquidator - Liquidator receives collateral proportional to debt plus liquidation reward",
        "custom:events": "Emits Liquidation event with liquidation details and current corn price",
        "custom:interactions": "- Transfers CORN from liquidator to this contract - Transfers ETH collateral to liquidator",
        "custom:requirements": "- The user's position must be liquidatable (checked via isLiquidatable function) - Liquidator must have sufficient CORN balance to cover the user's debt - Liquidator must have approved this contract to transfer the debt amount in CORN",
        "details": "Liquidates a user's position by paying their debt and receiving collateral plus rewardThe liquidation reward is calculated as a percentage of the collateral being liquidatedIf calculated reward exceeds available collateral, the liquidator receives all remaining collateral",
        "params": {
          "user": "The address of the user to liquidate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repayCorn(uint256)": {
        "custom:requirements": "- repayAmount must be greater than 0 - repayAmount must not exceed user's current debt - User must have approved this contract to transfer repayAmount of CORN tokens - User must have sufficient CORN balance",
        "details": "Validates the repay amount and updates user's debt balanceEmits AssetRepaid event with current corn price",
        "params": {
          "repayAmount": "The amount of corn to repay"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawCollateral(uint256)": {
        "custom:effects": "Decreases user's collateral balance by amount",
        "custom:interactions": "Transfers ETH to user, emits CollateralWithdrawn event",
        "custom:requirements": "amount must be > 0 and <= user's collateral balanceresulting position must remain above collateral ratio",
        "details": "Validates position safety before allowing withdrawal",
        "params": {
          "amount": "The amount of ETH collateral to withdraw"
        }
      }
    },
    "stateVariables": {
      "COLLATERAL_RATIO": {
        "details": "Positions below this ratio can be liquidated"
      },
      "LIQUIDATOR_REWARD": {
        "details": "Liquidators receive 10% of the liquidated collateral as reward"
      },
      "i_corn": {
        "details": "Used for borrowing and repaying CORN tokens"
      },
      "i_cornDEX": {
        "details": "Used to get current ETH/CORN price for collateral calculations"
      },
      "s_userBorrowed": {
        "details": "Tracks how much CORN each user has borrowed"
      },
      "s_userCollateral": {
        "details": "Tracks how much ETH each user has deposited as collateral"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Lending__BorrowingFailed()": [
        {
          "notice": "Thrown when a borrow operation fails"
        }
      ],
      "Lending__InsufficientLiquidatorCorn()": [
        {
          "notice": "Thrown when liquidator doesn't have sufficient CORN tokens"
        }
      ],
      "Lending__InvalidAmount()": [
        {
          "notice": "Thrown when an invalid amount (0 or insufficient) is provided"
        }
      ],
      "Lending__NotLiquidatable()": [
        {
          "notice": "Thrown when a position is not eligible for liquidation"
        }
      ],
      "Lending__TransferFailed()": [
        {
          "notice": "Thrown when a transfer operation fails"
        }
      ],
      "Lending__UnsafePositionRatio()": [
        {
          "notice": "Thrown when a user's position ratio becomes unsafe (below collateral requirement)"
        }
      ]
    },
    "events": {
      "AssetBorrowed(address,uint256,uint256)": {
        "notice": "Emitted when a user borrows CORN tokens"
      },
      "AssetRepaid(address,uint256,uint256)": {
        "notice": "Emitted when a user repays CORN tokens"
      },
      "CollateralAdded(address,uint256,uint256)": {
        "notice": "Emitted when a user adds collateral to their account"
      },
      "CollateralWithdrawn(address,uint256,uint256)": {
        "notice": "Emitted when a user withdraws collateral from their account"
      },
      "Liquidation(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a liquidation occurs"
      }
    },
    "kind": "user",
    "methods": {
      "_calculatePositionRatio(address)": {
        "notice": "Calculates the position ratio for a user to ensure they are within safe limits"
      },
      "addCollateral()": {
        "notice": "Allows users to add ETH collateral to their account"
      },
      "borrowCorn(uint256)": {
        "notice": "Allows users to borrow CORN tokens based on their collateral"
      },
      "calculateCollateralValue(address)": {
        "notice": "Calculates the total collateral value for a user in CORN tokens"
      },
      "constructor": {
        "notice": "Constructor to initialize the Lending contract"
      },
      "isLiquidatable(address)": {
        "notice": "Checks if a user's position can be liquidated"
      },
      "liquidate(address)": {
        "notice": "Allows liquidators to liquidate unsafe positions"
      },
      "repayCorn(uint256)": {
        "notice": "Allows users to repay corn and reduce their debt"
      },
      "s_userBorrowed(address)": {
        "notice": "Mapping of user addresses to their borrowed CORN amount"
      },
      "s_userCollateral(address)": {
        "notice": "Mapping of user addresses to their collateral balance in ETH"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Allows users to withdraw collateral as long as it doesn't make them liquidatable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Lending.sol:Lending",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1695,
        "contract": "contracts/Lending.sol:Lending",
        "label": "i_corn",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Corn)1000"
      },
      {
        "astId": 1699,
        "contract": "contracts/Lending.sol:Lending",
        "label": "i_cornDEX",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(CornDEX)1652"
      },
      {
        "astId": 1704,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_userCollateral",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1709,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_userBorrowed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Corn)1000": {
        "encoding": "inplace",
        "label": "contract Corn",
        "numberOfBytes": "20"
      },
      "t_contract(CornDEX)1652": {
        "encoding": "inplace",
        "label": "contract CornDEX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}